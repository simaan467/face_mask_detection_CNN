# -*- coding: utf-8 -*-
"""Face mask detection using CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14kVpr6_K4LKs2q9-bTUN8znnlS6WzXYJ
"""

!pip install kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d omkargurav/face-mask-dataset

from zipfile import ZipFile
dataset = '/content/face-mask-dataset.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('done')

import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

with_mask_files = os.listdir('/content/data/with_mask')
print(with_mask_files[0:5])

without_mask_files = os.listdir('/content/data/without_mask')
print(without_mask_files[0:5])

print(len(with_mask_files))
print(len(without_mask_files))

with_mask_labels = [0]*3725
without_mask_labels = [1]*3828

labels = with_mask_labels+without_mask_labels
print(len(labels))

img = mpimg.imread('/content/data/with_mask/with_mask_2313.jpg')
imgplot = plt.imshow(img)
plt.show()

img = mpimg.imread('/content/data/without_mask/without_mask_3339.jpg')
imgplot = plt.imshow(img)
plt.show()

with_mask_path= '/content/data/with_mask/'
data = []
for img_file in with_mask_files:
  image = Image.open(with_mask_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

without_mask_path = '/content/data/without_mask/'
for img_file in without_mask_files:
  image = Image.open(without_mask_path+img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

len(data)

type(data)

type(data[0])

X = np.array(data)
Y = np.array(labels)

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

X_train_scaled = X_train/255
X_test_scaled = X_test/255

import tensorflow as tf
from tensorflow import keras

num_of_classes = 2
model = keras.Sequential()
model.add(keras.layers.Conv2D(32,kernel_size= (3,3),activation='relu',input_shape=(128,128,3)))
model.add(keras.layers.MaxPool2D(pool_size=(2,2)))
model.add(keras.layers.Conv2D(64,kernel_size= (3,3),activation='relu',input_shape=(128,128,3)))
model.add(keras.layers.MaxPool2D(pool_size=(2,2)))
model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(128,activation='relu'))
model.add(keras.layers.Dense(num_of_classes,activation='sigmoid'))

model.compile(optimizer='adam',loss= 'sparse_categorical_crossentropy',metrics = ['acc'])

history = model.fit(X_train_scaled,Y_train,validation_split=0.1,epochs=5)

loss,accuracy = model.evaluate(X_test_scaled,Y_test)

print(accuracy)

print(loss)

h = history
plt.plot(h.history['loss'],label= 'train_loss')
plt.plot(h.history['val_loss'],label= 'val_loss')
plt.legend()
plt.show()

plt.plot(h.history['acc'],label= 'accuracy')
plt.plot(h.history['val_acc'],label= 'val_accuracy')
plt.legend()
plt.show()

input_image_path = input('enter the input image path')
input_image = cv2.imread(input_image_path)
input_image_resized = cv2.resize(input_image,((128,128)))
input_image_scaled = input_image_resized/255
input_image_reshaped = np.reshape(input_image_scaled,[1,128,128,3])
input_prediction = model.predict(input_image_reshaped)
print(input_prediction)
input_pred_label = np.argmax(input_prediction)
print(input_prediction)
if input_pred_label == 1:
  print('The Person is wearing a mask', )
  cv2_imshow(input_image_resized)
else:
  print('The Person is not wearing a mask',)
  cv2_imshow(input_image_resized)
  cv2.destroyAllWindows()